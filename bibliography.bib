@article{DirectedIncrementalSymExe,
author = {Yang, Guowei and Person, Suzette and Rungta, Neha and Khurshid, Sarfraz},
title = {Directed Incremental Symbolic Execution},
institution = {NASA, University of Texas},
url = {https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20110023245.pdf},
year = {2014}}

@InProceedings{chopper:icse18,
author = {David Trabish and Andrea Mattavelli and Noam Rinetzky and Cristian Cadar},
title = {Chopped Symbolic Execution},
booktitle = {International Conference on Software Engineering (ICSE 2018)},
year = {2018},
month = {5},
location = {Gothenburg, Sweden},
}

% Microsoft
@inproceedings{bouncer-securing-software-by-blocking-bad-input,
author = {Costa, Manuel and Castro, Miguel and Zhou, Lidong and Zhang, Lintao and Peinado, Marcus},
title = {Bouncer: Securing Software by Blocking Bad Input},
booktitle = {},
year = {2007},
month = {October},
abstract = {Attackers exploit software vulnerabilities to control or crash programs. Bouncer uses existing software instrumentation techniques to detect attacks and it generates filters automatically to block exploits of the target vulnerabilities. The filters are deployed automatically by instrumenting system calls to drop exploit messages. These filters introduce low overhead and they allow programs to keep running correctly under attack. Previous work computes filters using symbolic execution along the path taken by a sample exploit, but attackers can bypass these filters by generating exploits that follow a different execution path. Bouncer introduces three techniques to generalize filters so that they are harder to bypass: a new form of program slicing that uses a combination of static and dynamic analysis to remove unnecessary conditions from the filter; symbolic summaries for common library functions that characterize their behavior succinctly as a set of conditions on the input; and generation of alternative exploits guided by symbolic execution. Bouncer filters have low overhead, they do not have false positives by design, and our results show that Bouncer can generate filters that block all exploits of some real-world vulnerabilities.},
publisher = {Association for Computing Machinery, Inc.},
url = {https://www.microsoft.com/en-us/research/publication/bouncer-securing-software-by-blocking-bad-input/},
address = {Stevenson, Washington, USA},
pages = {117-130},
journal = {},
volume = {},
chapter = {},
isbn = {978-1-59593-591-5},
}

@inproceedings{Visser:2004:TIG:1007512.1007526,
 author = {Visser, Willem and P\v{a}s\v{a}reanu, Corina S. and Khurshid, Sarfraz},
 title = {Test Input Generation with Java PathFinder},
 booktitle = {Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis},
 series = {ISSTA '04},
 year = {2004},
 isbn = {1-58113-820-2},
 location = {Boston, Massachusetts, USA},
 pages = {97--107},
 numpages = {11},
 url = {http://users.ece.utexas.edu/~khurshid/papers/JPF-issta04.pdf},
 doi = {10.1145/1007512.1007526},
 acmid = {1007526},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {coverage, model checking, red-black trees, symbolic execution, testing object-oriented programs},
}

% Symbolic execution in networks.
@inproceedings {220590,
author = {Mathy Vanhoef and Frank Piessens},
title = {Symbolic Execution of Security Protocol Implementations: Handling Cryptographic Primitives},
booktitle = {12th {USENIX} Workshop on Offensive Technologies ({WOOT} 18)},
year = {2018},
address = {Baltimore, MD},
url = {https://papers.mathyvanhoef.com/woot2018.pdf},
publisher = {{USENIX} Association}}

% Symbolic execution to detect exploits in hardware
@article{Hardware,
author = {Zhang, Rui and Sturton, Cynthia},
year = {2018},
month = {06},
url = {https://cs.unc.edu/~csturton/papers/FMS2018.pdf},
pages = {1-9},
title = {A recursive strategy for symbolic execution to find exploits in hardware designs}
}

@INPROCEEDINGS{5635129,
author={M. Papadakis and N. Malevris},
booktitle={2010 IEEE 21st International Symposium on Software Reliability Engineering},
title={Automatic Mutation Test Case Generation via Dynamic Symbolic Execution},
year={2010},
volume={},
number={},
url={http://pages.cs.aueb.gr/~mpapad/papers/ISSRE2010.pdf},
pages={121-130},
keywords={program testing;automatic mutation test case generation;dynamic symbolic execution;software testing activity;structural criteria hierarchy;branch testing;program transformation;test generation process;mutation based test cases;benchmark programs;Flow graphs;Space exploration;Software testing;Production;Process control;Buildings;automated test case generation;dynamic symbolic execution;mutation testing;mutant schemata},
doi={10.1109/ISSRE.2010.38},
ISSN={1071-9458},
month={Nov},}
